// go-match is a command-line utility to check if paths match include patterns and don't match exclude patterns.
package main

import (
	"encoding/json"
	"fmt"
	"os"

	"code.swisscom.com/swisscom/scsa-shared-tools/go-match/internal/match"
)

// Global variable for CI stamping.
var version = "unknown - unofficial & generated by unknown"

func main() {
	cfg, err := parseFlags()
	if err != nil {
		printAndExit1(fmt.Sprintf("parsing error: %v", err))
	}

	if err := cfg.Validate(); err != nil {
		printAndExit1(fmt.Sprintf("configuration error: %v", err))
	}

	matches, err := match.Match(cfg.Paths, cfg.Include, cfg.Exclude)
	if err != nil {
		printAndExit1(fmt.Sprintf("application error: %v", err))
	}

	// Print the JSON output
	// Convert the matched paths to JSON
	jsonOutput, err := json.Marshal(matches)
	if err != nil {
		printAndExit1(fmt.Sprintf("encoding matched paths to JSON: %v", err))
	}

	fmt.Println(string(jsonOutput))

	os.Exit(0)
}

// printAndExit1 prints the message to stderr and exits with status code 1.
func printAndExit1(msg string) {
	fmt.Fprintf(os.Stderr, "%s\n", msg)
	os.Exit(1)
}
